---
- name: Creating Agate User
  ansible.builtin.user:
    name: agate
    system: true
  register: created_user

- name: Create Agate SystemD unit
  ansible.builtin.template:
    src: templates/agate.service.j2
    dest: /lib/systemd/system/agate.service

- name: Create Gemini documents folder
  ansible.builtin.file:
    path: "{{ agate_root_folder }}"
    state: directory
    owner: "agate"
    group: "agate"
    mode: "u=rwX,g=rwX,o=rwX"

- name: Copy a test page for Agate
  ansible.builtin.copy:
    src: files/index.gmi
    dest: "{{ agate_root_folder }}/index.gmi"
    mode: 0777
    force: false

- name: Create Agate application folder
  ansible.builtin.file:
    path: "/usr/share/agate"
    state: directory
    owner: "agate"
    group: "agate"
    mode: "u=rwX,g=rwX"

- name: Download linux binary
  ansible.builtin.get_url:
    url: "{{ agate_binary_repo_url }}/releases/download/{{ agate_version_tag }}/agate.{{ ansible_architecture }}-unknown-linux-gnu.gz"
    dest: /tmp/agate.gz
  when:
    - ansible_architecture != "armv7"
    - ansible_architecture != "armv7l"
    - ansible_architecture != "riscv64"

- name: Download armv7 linux binary
  ansible.builtin.get_url:
    url: "{{ agate_binary_repo_url }}/releases/download/{{ agate_version_tag }}/agate.armv7-unknown-linux-gnueabihf.gz"
    dest: /tmp/agate.gz
  when: (ansible_architecture == "armv7" or ansible_architecture == "armv7l")

- name: Download RISC-V 64bit linux binary
  ansible.builtin.copy:
    src: files/agate-riscv64
    dest: /tmp/agate
  when: (ansible_architecture == "riscv64")

- name: Extract Agate binary
  ansible.builtin.shell: gzip -f -d /tmp/agate.gz 
  when: (ansible_architecture != "riscv64")

- name: Install Agate server
  ansible.builtin.copy:
    src: /tmp/agate
    dest: /usr/share/agate/agate
    remote_src: true
    mode: u=rwx,g=rx,o=x

- name: Starting Agate server
  ansible.builtin.systemd:
    state: restarted
    name: agate
    enabled: true
    daemon_reload: true
